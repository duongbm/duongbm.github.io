<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://duongbm.github.io/</id><title>Dungo</title><subtitle>Dungo Blog's - A chicky coder love to take note for easy remember.</subtitle> <updated>2022-05-13T17:21:21+07:00</updated> <author> <name>duongbm</name> <uri>https://duongbm.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://duongbm.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://duongbm.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2022 duongbm </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Python Decorators and Closures</title><link href="https://duongbm.github.io/posts/python-decorators-and-closures/" rel="alternate" type="text/html" title="Python Decorators and Closures" /><published>2021-11-14T22:00:00+07:00</published> <updated>2021-11-14T22:00:00+07:00</updated> <id>https://duongbm.github.io/posts/python-decorators-and-closures/</id> <content src="https://duongbm.github.io/posts/python-decorators-and-closures/" /> <author> <name>duongbm</name> </author> <summary> Decorator 101 Decorator là 1 callable object có argument là 1 function.(function này gọi là decorated function) def deco(func): def inner(): print('run inner()') func() return inner @deco # -&amp;gt; decorator func def target(): # -&amp;gt; decorated func print('run target()') &amp;gt;&amp;gt;&amp;gt; target() ... 'run inner()' ... 'run target()' Decorator được execute ngay ... </summary> </entry> <entry><title>Function trong python</title><link href="https://duongbm.github.io/posts/python-basic-function/" rel="alternate" type="text/html" title="Function trong python" /><published>2021-11-13T22:00:00+07:00</published> <updated>2021-11-14T21:36:04+07:00</updated> <id>https://duongbm.github.io/posts/python-basic-function/</id> <content src="https://duongbm.github.io/posts/python-basic-function/" /> <author> <name>duongbm</name> </author> <summary> Function là objects &amp;gt;&amp;gt;&amp;gt; def factorial(n): ... """return n!""" ... return 1 if n &amp;lt; 2 else n * factorial(n - 1) ... &amp;gt;&amp;gt;&amp;gt; factorial.__doc__ # __doc__ là 1 attribute của object factorial 'return n!' &amp;gt;&amp;gt;&amp;gt; type(factorial) # factorial là 1 object của function class &amp;lt;class 'function'&amp;gt; Higher-Order function Là function nhận argument là 1 function khác hoặ... </summary> </entry> </feed>
